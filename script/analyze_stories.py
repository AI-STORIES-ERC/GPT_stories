"""
This script analyzes the stories in the csv file generated by the generate_stories.py script.
It uses the GPT model to analyze the stories and save the results to a csv file.

The model will be prompted to analyse which traits are most valued in the story and then
it will be asked to give a step by step reasoning for the analysis.

"""

import pandas as pd
import os
import openai
import csv

# Set the API key for OpenAI
with open ("api_key.txt", "r") as f:
    openai.api_key = f.read().strip()

def analyze_stories(csv_file_path: str):
    """
    This function analyzes the stories in the csv file generated by the generate_stories.py script.
    It uses the GPT model to analyze the stories and save the results to a csv file.
    """
    # Read the csv file
    df = pd.read_csv(csv_file_path)
    # Initialize list to store analysis results
    results = []

    # Iterate through each story in the DataFrame
    for index, row in df.iterrows():
        story = row['Story']
        
        messages = [
            {"role": "user", "content": f"Only list 3 traits that are most valued in this story:\n\n{story}"}
        ]

        analysis_response = openai.chat.completions.create(
            model="gpt-4o-mini",
            messages=messages,
            temperature=1,
            max_tokens=100
        )

        analysis = analysis_response.choices[0].message.content
        messages.append({"role": "assistant", "content": analysis})
        messages.append({"role": "user", "content": f"Provide a step-by-step reasoning for your analysis of the children's story."})

        reasoning_response = openai.chat.completions.create(
            model="gpt-4o-mini",
            messages=messages,
            temperature=1,
            max_tokens=200
        )

        step_by_step_reasoning = reasoning_response.choices[0].message.content
        

        # Append results to list
        results.append((story, analysis, step_by_step_reasoning))

    # Add new columns to the DataFrame
    df['Analysis'] = [result[1] for result in results]
    df['Step-by-Step Reasoning'] = [result[2] for result in results]

    # Save the updated DataFrame to a new CSV file
    output_file = "analyzed_stories.csv"
    df.to_csv(output_file, index=False, quoting=csv.QUOTE_ALL)

    print(f"Analysis complete. Results saved to {output_file}")


    
if __name__ == "__main__":
    analyze_stories("generated_stories.csv")  
